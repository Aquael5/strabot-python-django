# Generated by Django 5.0 on 2024-01-04 01:39

import dirtyfields.dirtyfields
import django.contrib.postgres.fields
import django.db.models.deletion
import django.db.models.manager
import timescale.db.models.fields
import uuid
from django.db import migrations, models


class Migration(migrations.Migration):
    initial = True

    dependencies = []

    operations = [
        migrations.CreateModel(
            name="CryptoPriceRecView12H",
            fields=[
                (
                    "bucket",
                    models.DateTimeField(
                        primary_key=True, serialize=False, verbose_name="Bucket"
                    ),
                ),
                ("symbol", models.CharField(max_length=15, verbose_name="Symbol")),
                ("exchange", models.CharField(max_length=32, verbose_name="Exchange")),
                ("open", models.FloatField(verbose_name="Open")),
                ("high", models.FloatField(verbose_name="High")),
                ("low", models.FloatField(verbose_name="Low")),
                ("close", models.FloatField(verbose_name="Close")),
                ("volume", models.BigIntegerField(verbose_name="Volume")),
            ],
            options={
                "db_table": "crypto_pricerec_12h",
                "ordering": ["bucket"],
                "get_latest_by": ["bucket"],
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="CryptoPriceRecView15",
            fields=[
                (
                    "bucket",
                    models.DateTimeField(
                        primary_key=True, serialize=False, verbose_name="Bucket"
                    ),
                ),
                ("symbol", models.CharField(max_length=15, verbose_name="Symbol")),
                ("exchange", models.CharField(max_length=32, verbose_name="Exchange")),
                ("open", models.FloatField(verbose_name="Open")),
                ("high", models.FloatField(verbose_name="High")),
                ("low", models.FloatField(verbose_name="Low")),
                ("close", models.FloatField(verbose_name="Close")),
                ("volume", models.BigIntegerField(verbose_name="Volume")),
            ],
            options={
                "db_table": "crypto_pricerec_15",
                "ordering": ["bucket"],
                "get_latest_by": ["bucket"],
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="CryptoPriceRecView30",
            fields=[
                (
                    "bucket",
                    models.DateTimeField(
                        primary_key=True, serialize=False, verbose_name="Bucket"
                    ),
                ),
                ("symbol", models.CharField(max_length=15, verbose_name="Symbol")),
                ("exchange", models.CharField(max_length=32, verbose_name="Exchange")),
                ("open", models.FloatField(verbose_name="Open")),
                ("high", models.FloatField(verbose_name="High")),
                ("low", models.FloatField(verbose_name="Low")),
                ("close", models.FloatField(verbose_name="Close")),
                ("volume", models.BigIntegerField(verbose_name="Volume")),
            ],
            options={
                "db_table": "crypto_pricerec_30",
                "ordering": ["bucket"],
                "get_latest_by": ["bucket"],
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="CryptoPriceRecView4H",
            fields=[
                (
                    "bucket",
                    models.DateTimeField(
                        primary_key=True, serialize=False, verbose_name="Bucket"
                    ),
                ),
                ("symbol", models.CharField(max_length=15, verbose_name="Symbol")),
                ("exchange", models.CharField(max_length=32, verbose_name="Exchange")),
                ("open", models.FloatField(verbose_name="Open")),
                ("high", models.FloatField(verbose_name="High")),
                ("low", models.FloatField(verbose_name="Low")),
                ("close", models.FloatField(verbose_name="Close")),
                ("volume", models.BigIntegerField(verbose_name="Volume")),
            ],
            options={
                "db_table": "crypto_pricerec_4h",
                "ordering": ["bucket"],
                "get_latest_by": ["bucket"],
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="CryptoPriceRecView5",
            fields=[
                (
                    "bucket",
                    models.DateTimeField(
                        primary_key=True, serialize=False, verbose_name="Bucket"
                    ),
                ),
                ("symbol", models.CharField(max_length=15, verbose_name="Symbol")),
                ("exchange", models.CharField(max_length=32, verbose_name="Exchange")),
                ("open", models.FloatField(verbose_name="Open")),
                ("high", models.FloatField(verbose_name="High")),
                ("low", models.FloatField(verbose_name="Low")),
                ("close", models.FloatField(verbose_name="Close")),
                ("volume", models.BigIntegerField(verbose_name="Volume")),
            ],
            options={
                "db_table": "crypto_pricerec_5",
                "ordering": ["bucket"],
                "get_latest_by": ["bucket"],
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="CryptoPriceRecView60",
            fields=[
                (
                    "bucket",
                    models.DateTimeField(
                        primary_key=True, serialize=False, verbose_name="Bucket"
                    ),
                ),
                ("symbol", models.CharField(max_length=15, verbose_name="Symbol")),
                ("exchange", models.CharField(max_length=32, verbose_name="Exchange")),
                ("open", models.FloatField(verbose_name="Open")),
                ("high", models.FloatField(verbose_name="High")),
                ("low", models.FloatField(verbose_name="Low")),
                ("close", models.FloatField(verbose_name="Close")),
                ("volume", models.BigIntegerField(verbose_name="Volume")),
            ],
            options={
                "db_table": "crypto_pricerec_60",
                "ordering": ["bucket"],
                "get_latest_by": ["bucket"],
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="CryptoPriceRecView6H",
            fields=[
                (
                    "bucket",
                    models.DateTimeField(
                        primary_key=True, serialize=False, verbose_name="Bucket"
                    ),
                ),
                ("symbol", models.CharField(max_length=15, verbose_name="Symbol")),
                ("exchange", models.CharField(max_length=32, verbose_name="Exchange")),
                ("open", models.FloatField(verbose_name="Open")),
                ("high", models.FloatField(verbose_name="High")),
                ("low", models.FloatField(verbose_name="Low")),
                ("close", models.FloatField(verbose_name="Close")),
                ("volume", models.BigIntegerField(verbose_name="Volume")),
            ],
            options={
                "db_table": "crypto_pricerec_6h",
                "ordering": ["bucket"],
                "get_latest_by": ["bucket"],
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="CryptoPriceRecViewD",
            fields=[
                (
                    "bucket",
                    models.DateTimeField(
                        primary_key=True, serialize=False, verbose_name="Bucket"
                    ),
                ),
                ("symbol", models.CharField(max_length=15, verbose_name="Symbol")),
                ("exchange", models.CharField(max_length=32, verbose_name="Exchange")),
                ("open", models.FloatField(verbose_name="Open")),
                ("high", models.FloatField(verbose_name="High")),
                ("low", models.FloatField(verbose_name="Low")),
                ("close", models.FloatField(verbose_name="Close")),
                ("volume", models.BigIntegerField(verbose_name="Volume")),
            ],
            options={
                "db_table": "crypto_pricerec_d",
                "ordering": ["bucket"],
                "get_latest_by": ["bucket"],
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="CryptoPriceRecViewM",
            fields=[
                (
                    "bucket",
                    models.DateTimeField(
                        primary_key=True, serialize=False, verbose_name="Bucket"
                    ),
                ),
                ("symbol", models.CharField(max_length=15, verbose_name="Symbol")),
                ("exchange", models.CharField(max_length=32, verbose_name="Exchange")),
                ("open", models.FloatField(verbose_name="Open")),
                ("high", models.FloatField(verbose_name="High")),
                ("low", models.FloatField(verbose_name="Low")),
                ("close", models.FloatField(verbose_name="Close")),
                ("volume", models.BigIntegerField(verbose_name="Volume")),
            ],
            options={
                "db_table": "crypto_pricerec_m",
                "ordering": ["bucket"],
                "get_latest_by": ["bucket"],
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="CryptoPriceRecViewQ",
            fields=[
                (
                    "bucket",
                    models.DateTimeField(
                        primary_key=True, serialize=False, verbose_name="Bucket"
                    ),
                ),
                ("symbol", models.CharField(max_length=15, verbose_name="Symbol")),
                ("exchange", models.CharField(max_length=32, verbose_name="Exchange")),
                ("open", models.FloatField(verbose_name="Open")),
                ("high", models.FloatField(verbose_name="High")),
                ("low", models.FloatField(verbose_name="Low")),
                ("close", models.FloatField(verbose_name="Close")),
                ("volume", models.BigIntegerField(verbose_name="Volume")),
            ],
            options={
                "db_table": "crypto_pricerec_q",
                "ordering": ["bucket"],
                "get_latest_by": ["bucket"],
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="CryptoPriceRecViewW",
            fields=[
                (
                    "bucket",
                    models.DateTimeField(
                        primary_key=True, serialize=False, verbose_name="Bucket"
                    ),
                ),
                ("symbol", models.CharField(max_length=15, verbose_name="Symbol")),
                ("exchange", models.CharField(max_length=32, verbose_name="Exchange")),
                ("open", models.FloatField(verbose_name="Open")),
                ("high", models.FloatField(verbose_name="High")),
                ("low", models.FloatField(verbose_name="Low")),
                ("close", models.FloatField(verbose_name="Close")),
                ("volume", models.BigIntegerField(verbose_name="Volume")),
            ],
            options={
                "db_table": "crypto_pricerec_w",
                "ordering": ["bucket"],
                "get_latest_by": ["bucket"],
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="CryptoPriceRecViewY",
            fields=[
                (
                    "bucket",
                    models.DateTimeField(
                        primary_key=True, serialize=False, verbose_name="Bucket"
                    ),
                ),
                ("symbol", models.CharField(max_length=15, verbose_name="Symbol")),
                ("exchange", models.CharField(max_length=32, verbose_name="Exchange")),
                ("open", models.FloatField(verbose_name="Open")),
                ("high", models.FloatField(verbose_name="High")),
                ("low", models.FloatField(verbose_name="Low")),
                ("close", models.FloatField(verbose_name="Close")),
                ("volume", models.BigIntegerField(verbose_name="Volume")),
            ],
            options={
                "db_table": "crypto_pricerec_y",
                "ordering": ["bucket"],
                "get_latest_by": ["bucket"],
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="StagingOHLCV",
            fields=[
                ("id", models.BigAutoField(primary_key=True, serialize=False)),
                ("symbol", models.CharField(max_length=64)),
                ("tf", models.CharField(max_length=3)),
                ("ohlcv", models.JSONField()),
            ],
            options={
                "db_table": "staging_ohlcv",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="StockPriceRecView15",
            fields=[
                (
                    "bucket",
                    models.DateTimeField(
                        primary_key=True, serialize=False, verbose_name="Bucket"
                    ),
                ),
                ("symbol", models.CharField(max_length=15, verbose_name="Symbol")),
                ("open", models.FloatField(verbose_name="Open")),
                ("high", models.FloatField(verbose_name="High")),
                ("low", models.FloatField(verbose_name="Low")),
                ("close", models.FloatField(verbose_name="Close")),
                ("volume", models.BigIntegerField(verbose_name="Volume")),
            ],
            options={
                "db_table": "stock_pricerec_15",
                "ordering": ["bucket"],
                "get_latest_by": ["bucket"],
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="StockPriceRecView30",
            fields=[
                (
                    "bucket",
                    models.DateTimeField(
                        primary_key=True, serialize=False, verbose_name="Bucket"
                    ),
                ),
                ("symbol", models.CharField(max_length=15, verbose_name="Symbol")),
                ("open", models.FloatField(verbose_name="Open")),
                ("high", models.FloatField(verbose_name="High")),
                ("low", models.FloatField(verbose_name="Low")),
                ("close", models.FloatField(verbose_name="Close")),
                ("volume", models.BigIntegerField(verbose_name="Volume")),
            ],
            options={
                "db_table": "stock_pricerec_30",
                "ordering": ["bucket"],
                "get_latest_by": ["bucket"],
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="StockPriceRecView5",
            fields=[
                (
                    "bucket",
                    models.DateTimeField(
                        primary_key=True, serialize=False, verbose_name="Bucket"
                    ),
                ),
                ("symbol", models.CharField(max_length=15, verbose_name="Symbol")),
                ("open", models.FloatField(verbose_name="Open")),
                ("high", models.FloatField(verbose_name="High")),
                ("low", models.FloatField(verbose_name="Low")),
                ("close", models.FloatField(verbose_name="Close")),
                ("volume", models.BigIntegerField(verbose_name="Volume")),
            ],
            options={
                "db_table": "stock_pricerec_5",
                "ordering": ["bucket"],
                "get_latest_by": ["bucket"],
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="StockPriceRecViewD",
            fields=[
                (
                    "bucket",
                    models.DateTimeField(
                        primary_key=True, serialize=False, verbose_name="Bucket"
                    ),
                ),
                ("symbol", models.CharField(max_length=15, verbose_name="Symbol")),
                ("open", models.FloatField(verbose_name="Open")),
                ("high", models.FloatField(verbose_name="High")),
                ("low", models.FloatField(verbose_name="Low")),
                ("close", models.FloatField(verbose_name="Close")),
                ("volume", models.BigIntegerField(verbose_name="Volume")),
            ],
            options={
                "db_table": "stock_pricerec_d",
                "ordering": ["bucket"],
                "get_latest_by": ["bucket"],
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="StockPriceRecViewM",
            fields=[
                (
                    "bucket",
                    models.DateTimeField(
                        primary_key=True, serialize=False, verbose_name="Bucket"
                    ),
                ),
                ("symbol", models.CharField(max_length=15, verbose_name="Symbol")),
                ("open", models.FloatField(verbose_name="Open")),
                ("high", models.FloatField(verbose_name="High")),
                ("low", models.FloatField(verbose_name="Low")),
                ("close", models.FloatField(verbose_name="Close")),
                ("volume", models.BigIntegerField(verbose_name="Volume")),
            ],
            options={
                "db_table": "stock_pricerec_m",
                "ordering": ["bucket"],
                "get_latest_by": ["bucket"],
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="StockPriceRecViewQ",
            fields=[
                (
                    "bucket",
                    models.DateTimeField(
                        primary_key=True, serialize=False, verbose_name="Bucket"
                    ),
                ),
                ("symbol", models.CharField(max_length=15, verbose_name="Symbol")),
                ("open", models.FloatField(verbose_name="Open")),
                ("high", models.FloatField(verbose_name="High")),
                ("low", models.FloatField(verbose_name="Low")),
                ("close", models.FloatField(verbose_name="Close")),
                ("volume", models.BigIntegerField(verbose_name="Volume")),
            ],
            options={
                "db_table": "stock_pricerec_q",
                "ordering": ["bucket"],
                "get_latest_by": ["bucket"],
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="StockPriceRecViewW",
            fields=[
                (
                    "bucket",
                    models.DateTimeField(
                        primary_key=True, serialize=False, verbose_name="Bucket"
                    ),
                ),
                ("symbol", models.CharField(max_length=15, verbose_name="Symbol")),
                ("open", models.FloatField(verbose_name="Open")),
                ("high", models.FloatField(verbose_name="High")),
                ("low", models.FloatField(verbose_name="Low")),
                ("close", models.FloatField(verbose_name="Close")),
                ("volume", models.BigIntegerField(verbose_name="Volume")),
            ],
            options={
                "db_table": "stock_pricerec_w",
                "ordering": ["bucket"],
                "get_latest_by": ["bucket"],
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="StockPriceRecViewY",
            fields=[
                (
                    "bucket",
                    models.DateTimeField(
                        primary_key=True, serialize=False, verbose_name="Bucket"
                    ),
                ),
                ("symbol", models.CharField(max_length=15, verbose_name="Symbol")),
                ("open", models.FloatField(verbose_name="Open")),
                ("high", models.FloatField(verbose_name="High")),
                ("low", models.FloatField(verbose_name="Low")),
                ("close", models.FloatField(verbose_name="Close")),
                ("volume", models.BigIntegerField(verbose_name="Volume")),
            ],
            options={
                "db_table": "stock_pricerec_y",
                "ordering": ["bucket"],
                "get_latest_by": ["bucket"],
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="CryptoTrade",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "time",
                    timescale.db.models.fields.TimescaleDateTimeField(interval="1 day"),
                ),
                (
                    "symbol",
                    models.CharField(
                        db_index=True, max_length=32, verbose_name="Symbol"
                    ),
                ),
                ("trade_id", models.BigIntegerField(verbose_name="Trade ID")),
                (
                    "price",
                    models.DecimalField(
                        decimal_places=8, max_digits=20, verbose_name="Price"
                    ),
                ),
                (
                    "size",
                    models.DecimalField(
                        decimal_places=8, max_digits=20, verbose_name="Size"
                    ),
                ),
                ("market_maker", models.BooleanField(verbose_name="Market Maker")),
            ],
            options={
                "db_table": "crypto_trades",
                "ordering": ["time"],
                "get_latest_by": ["time"],
            },
            managers=[
                ("timescale", django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name="DominoGroup",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("direction", models.IntegerField()),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "unique_uuid",
                    models.UUIDField(default=uuid.uuid4, editable=False, unique=True),
                ),
                ("unique_hash", models.CharField(max_length=64, unique=True)),
                ("expires", models.DateTimeField()),
            ],
        ),
        migrations.CreateModel(
            name="DominoGroupMember",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="LiveLoop",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "symbol_type",
                    models.CharField(
                        choices=[("stock", "Stock"), ("crypto", "Crypto")], max_length=7
                    ),
                ),
                ("start_datetime", models.DateTimeField()),
                ("start_perf", models.FloatField()),
                ("last_datetime", models.DateTimeField()),
                ("last_perf", models.FloatField()),
                ("last_stats_flush_at", models.DateTimeField()),
                ("last_run_number", models.PositiveBigIntegerField()),
                ("num_setups_examined", models.PositiveBigIntegerField()),
                ("num_setups_updated", models.PositiveBigIntegerField()),
                ("num_setups_triggered", models.PositiveBigIntegerField()),
                ("num_alerts_attempted", models.PositiveBigIntegerField()),
            ],
        ),
        migrations.CreateModel(
            name="LiveLoopRun",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("start_datetime", models.DateTimeField()),
                ("start_perf", models.FloatField()),
                ("end_datetime", models.DateTimeField()),
                ("end_perf", models.FloatField()),
                ("run_number", models.PositiveBigIntegerField()),
                ("fully_ran", models.BooleanField()),
                ("exit_reason", models.TextField()),
                ("exit_reason_detail", models.TextField()),
                ("symbols_refreshed", models.BooleanField()),
                (
                    "symbols_refreshed_duration",
                    models.FloatField(blank=True, default=None, null=True),
                ),
                (
                    "num_symbols",
                    models.PositiveIntegerField(blank=True, default=None, null=True),
                ),
                ("setups_refreshed", models.BooleanField()),
                (
                    "setups_refresh_duration",
                    models.FloatField(blank=True, default=None, null=True),
                ),
                (
                    "num_setups",
                    models.PositiveIntegerField(blank=True, default=None, null=True),
                ),
                ("price_records_refreshed", models.BooleanField()),
                (
                    "price_records_refreshed_duration",
                    models.FloatField(blank=True, default=None, null=True),
                ),
                (
                    "num_price_records",
                    models.PositiveIntegerField(blank=True, default=None, null=True),
                ),
                ("num_setups_examined", models.PositiveBigIntegerField()),
                ("num_setups_updated", models.PositiveBigIntegerField()),
                ("num_setups_triggered", models.PositiveBigIntegerField()),
                ("num_alerts_attempted", models.PositiveBigIntegerField()),
                ("flushed_at", models.DateTimeField()),
            ],
        ),
        migrations.CreateModel(
            name="Setup",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("target_candle", models.JSONField(verbose_name="Target Candle")),
                ("trigger_candle", models.JSONField(verbose_name="Trigger Candle")),
                (
                    "candle_tag",
                    models.CharField(
                        blank=True, max_length=16, null=True, verbose_name="Candle Tag"
                    ),
                ),
                (
                    "timestamp",
                    models.DateTimeField(db_index=True, verbose_name="Timestamp"),
                ),
                ("expires", models.DateTimeField(verbose_name="Expires At")),
                (
                    "tf",
                    models.CharField(
                        choices=[
                            ("1", "1 Minute"),
                            ("5", "5 Minutes"),
                            ("15", "15 Minutes"),
                            ("30", "30 Minutes"),
                            ("60", "60 Minutes"),
                            ("4H", "4 Hours"),
                            ("6H", "6 Hours"),
                            ("12H", "12 Hours"),
                            ("D", "1 Day"),
                            ("W", "1 Week"),
                            ("M", "1 Month"),
                            ("Q", "1 Quarter"),
                            ("Y", "1 Year"),
                        ],
                        max_length=3,
                        verbose_name="Timeframe",
                    ),
                ),
                (
                    "pattern",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.CharField(max_length=3),
                        size=2,
                        verbose_name="Pattern",
                    ),
                ),
                ("trigger", models.FloatField(verbose_name="Trigger")),
                (
                    "targets",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.FloatField(),
                        size=None,
                        verbose_name="Targets",
                    ),
                ),
                ("stop", models.FloatField(verbose_name="Stop")),
                (
                    "direction",
                    models.SmallIntegerField(
                        choices=[(-1, "BEAR"), (1, "BULL")], verbose_name="Direction"
                    ),
                ),
                ("rr", models.FloatField(verbose_name="Risk:Return")),
                (
                    "serialized_df",
                    models.BinaryField(blank=True, null=True, verbose_name="Dataframe"),
                ),
                (
                    "priority",
                    models.PositiveSmallIntegerField(
                        default=0, verbose_name="Priority"
                    ),
                ),
                ("pmg", models.IntegerField(default=0, verbose_name="PMG")),
                (
                    "has_triggered",
                    models.BooleanField(default=False, verbose_name="Triggered"),
                ),
                (
                    "trigger_count",
                    models.PositiveBigIntegerField(
                        default=0, verbose_name="Trigger Count"
                    ),
                ),
                (
                    "initial_trigger",
                    models.DateTimeField(
                        blank=True,
                        default=None,
                        null=True,
                        verbose_name="Initial Trigger",
                    ),
                ),
                (
                    "last_triggered",
                    models.DateTimeField(
                        blank=True,
                        default=None,
                        null=True,
                        verbose_name="Last Triggered",
                    ),
                ),
                (
                    "in_force",
                    models.BooleanField(default=False, verbose_name="In Force"),
                ),
                (
                    "in_force_alerted",
                    models.BooleanField(
                        default=False, verbose_name="In Force Alerted?"
                    ),
                ),
                (
                    "in_force_last_alerted",
                    models.DateTimeField(
                        blank=True,
                        default=None,
                        null=True,
                        verbose_name="In Force Last Alerted",
                    ),
                ),
                (
                    "hit_magnitude",
                    models.BooleanField(default=False, verbose_name="Hit Magnitude"),
                ),
                (
                    "magnitude_alerted",
                    models.BooleanField(
                        default=False, verbose_name="Magnitude Alerted"
                    ),
                ),
                (
                    "magnitude_last_alerted",
                    models.DateTimeField(
                        blank=True,
                        default=None,
                        null=True,
                        verbose_name="Magnitude Last Alerted",
                    ),
                ),
                (
                    "potential_outside",
                    models.BooleanField(
                        default=False, verbose_name="Potential Outside Bar"
                    ),
                ),
                (
                    "discord_alerted",
                    models.BooleanField(default=False, verbose_name="Discord Alerted"),
                ),
                ("gapped", models.BooleanField(default=False, verbose_name="Gapped?")),
                ("negated", models.BooleanField(default=False, verbose_name="Negated")),
                (
                    "negated_reasons",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.IntegerField(
                            choices=[
                                (1, "RR Minimum"),
                                (2, "TFC Conflict"),
                                (3, "Magnitude Threshold"),
                                (4, "Gapping"),
                                (5, "Potential Outside Bar"),
                            ]
                        ),
                        blank=True,
                        default=list,
                        null=True,
                        size=None,
                    ),
                ),
            ],
            options={
                "verbose_name": "Setup",
                "verbose_name_plural": "Setups",
                "ordering": ["-timestamp"],
                "get_latest_by": "timestamp",
            },
            bases=(dirtyfields.dirtyfields.DirtyFieldsMixin, models.Model),
        ),
        migrations.CreateModel(
            name="SetupDev",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("target_candle", models.JSONField(verbose_name="Target Candle")),
                ("trigger_candle", models.JSONField(verbose_name="Trigger Candle")),
                (
                    "candle_tag",
                    models.CharField(
                        blank=True, max_length=16, null=True, verbose_name="Candle Tag"
                    ),
                ),
                (
                    "timestamp",
                    models.DateTimeField(db_index=True, verbose_name="Timestamp"),
                ),
                ("expires", models.DateTimeField(verbose_name="Expires At")),
                (
                    "tf",
                    models.CharField(
                        choices=[
                            ("1", "1 Minute"),
                            ("5", "5 Minutes"),
                            ("15", "15 Minutes"),
                            ("30", "30 Minutes"),
                            ("60", "60 Minutes"),
                            ("4H", "4 Hours"),
                            ("6H", "6 Hours"),
                            ("12H", "12 Hours"),
                            ("D", "1 Day"),
                            ("W", "1 Week"),
                            ("M", "1 Month"),
                            ("Q", "1 Quarter"),
                            ("Y", "1 Year"),
                        ],
                        max_length=3,
                        verbose_name="Timeframe",
                    ),
                ),
                (
                    "pattern",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.CharField(max_length=3),
                        size=2,
                        verbose_name="Pattern",
                    ),
                ),
                ("trigger", models.FloatField(verbose_name="Trigger")),
                (
                    "targets",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.FloatField(),
                        size=None,
                        verbose_name="Targets",
                    ),
                ),
                ("stop", models.FloatField(verbose_name="Stop")),
                (
                    "direction",
                    models.SmallIntegerField(
                        choices=[(-1, "BEAR"), (1, "BULL")], verbose_name="Direction"
                    ),
                ),
                ("rr", models.FloatField(verbose_name="Risk:Return")),
                (
                    "serialized_df",
                    models.BinaryField(blank=True, null=True, verbose_name="Dataframe"),
                ),
                (
                    "priority",
                    models.PositiveSmallIntegerField(
                        default=0, verbose_name="Priority"
                    ),
                ),
                ("pmg", models.IntegerField(default=0, verbose_name="PMG")),
                (
                    "has_triggered",
                    models.BooleanField(default=False, verbose_name="Triggered"),
                ),
                (
                    "trigger_count",
                    models.PositiveBigIntegerField(
                        default=0, verbose_name="Trigger Count"
                    ),
                ),
                (
                    "initial_trigger",
                    models.DateTimeField(
                        blank=True,
                        default=None,
                        null=True,
                        verbose_name="Initial Trigger",
                    ),
                ),
                (
                    "last_triggered",
                    models.DateTimeField(
                        blank=True,
                        default=None,
                        null=True,
                        verbose_name="Last Triggered",
                    ),
                ),
                (
                    "in_force",
                    models.BooleanField(default=False, verbose_name="In Force"),
                ),
                (
                    "in_force_alerted",
                    models.BooleanField(
                        default=False, verbose_name="In Force Alerted?"
                    ),
                ),
                (
                    "in_force_last_alerted",
                    models.DateTimeField(
                        blank=True,
                        default=None,
                        null=True,
                        verbose_name="In Force Last Alerted",
                    ),
                ),
                (
                    "hit_magnitude",
                    models.BooleanField(default=False, verbose_name="Hit Magnitude"),
                ),
                (
                    "magnitude_alerted",
                    models.BooleanField(
                        default=False, verbose_name="Magnitude Alerted"
                    ),
                ),
                (
                    "magnitude_last_alerted",
                    models.DateTimeField(
                        blank=True,
                        default=None,
                        null=True,
                        verbose_name="Magnitude Last Alerted",
                    ),
                ),
                (
                    "potential_outside",
                    models.BooleanField(
                        default=False, verbose_name="Potential Outside Bar"
                    ),
                ),
                (
                    "discord_alerted",
                    models.BooleanField(default=False, verbose_name="Discord Alerted"),
                ),
                ("gapped", models.BooleanField(default=False, verbose_name="Gapped?")),
                ("negated", models.BooleanField(default=False, verbose_name="Negated")),
                (
                    "negated_reasons",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.IntegerField(
                            choices=[
                                (1, "RR Minimum"),
                                (2, "TFC Conflict"),
                                (3, "Magnitude Threshold"),
                                (4, "Gapping"),
                                (5, "Potential Outside Bar"),
                            ]
                        ),
                        default=list,
                        size=None,
                    ),
                ),
            ],
            options={
                "verbose_name": "SetupDev",
                "verbose_name_plural": "SetupsDev",
                "ordering": ["-timestamp"],
                "get_latest_by": "timestamp",
            },
            bases=(dirtyfields.dirtyfields.DirtyFieldsMixin, models.Model),
        ),
        migrations.CreateModel(
            name="StockIndex",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=32, verbose_name="Index Name")),
            ],
        ),
        migrations.CreateModel(
            name="StockPriceRec",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "time",
                    timescale.db.models.fields.TimescaleDateTimeField(
                        interval="1 year"
                    ),
                ),
                (
                    "symbol",
                    models.CharField(
                        db_index=True, max_length=32, verbose_name="Symbol"
                    ),
                ),
                ("open", models.DecimalField(decimal_places=4, max_digits=10)),
                ("high", models.DecimalField(decimal_places=4, max_digits=10)),
                ("low", models.DecimalField(decimal_places=4, max_digits=10)),
                ("close", models.DecimalField(decimal_places=4, max_digits=10)),
                ("volume", models.DecimalField(decimal_places=1, max_digits=20)),
                ("transactions", models.IntegerField(blank=True, null=True)),
                (
                    "vwap",
                    models.DecimalField(
                        blank=True, decimal_places=4, max_digits=10, null=True
                    ),
                ),
            ],
            options={
                "db_table": "stock_pricerec",
                "ordering": ["time"],
                "get_latest_by": ["time"],
            },
            managers=[
                ("timescale", django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name="StockTrade",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "time",
                    timescale.db.models.fields.TimescaleDateTimeField(interval="1 day"),
                ),
                (
                    "symbol",
                    models.CharField(
                        db_index=True, max_length=32, verbose_name="Symbol"
                    ),
                ),
                ("trade_id", models.BigIntegerField(verbose_name="Trade ID")),
                (
                    "exchange_code",
                    models.CharField(max_length=1, verbose_name="Exchange Code"),
                ),
                (
                    "price",
                    models.DecimalField(
                        decimal_places=4, max_digits=10, verbose_name="Price"
                    ),
                ),
                ("size", models.IntegerField(verbose_name="Size")),
                ("conditions", models.JSONField(verbose_name="Conditions")),
                ("tape", models.CharField(max_length=1, verbose_name="Tape")),
            ],
            options={
                "verbose_name": "Trade",
                "verbose_name_plural": "Trades",
                "db_table": "stock_trades",
                "ordering": ["time"],
                "get_latest_by": ["time"],
            },
            managers=[
                ("timescale", django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name="SymbolRec",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "exchange",
                    models.CharField(
                        choices=[
                            ("NYSE", "NYSE"),
                            ("POLYGON", "Polygon"),
                            ("BINANCE", "Binance"),
                        ],
                        max_length=32,
                        verbose_name="Exchange",
                    ),
                ),
                (
                    "symbol",
                    models.CharField(max_length=32, unique=True, verbose_name="Symbol"),
                ),
                (
                    "symbol_type",
                    models.CharField(
                        choices=[("stock", "Stock"), ("crypto", "Crypto")],
                        max_length=7,
                        verbose_name="Type",
                    ),
                ),
                (
                    "price",
                    models.FloatField(blank=True, null=True, verbose_name="Price"),
                ),
                ("atr", models.FloatField(blank=True, null=True, verbose_name="ATR $")),
                (
                    "atr_percentage",
                    models.FloatField(blank=True, null=True, verbose_name="ATR %"),
                ),
                (
                    "as_of",
                    models.DateTimeField(blank=True, null=True, verbose_name="As Of"),
                ),
                (
                    "polygon_meta",
                    models.JSONField(
                        blank=True, null=True, verbose_name="Polygon Meta"
                    ),
                ),
                (
                    "schwab_meta",
                    models.JSONField(blank=True, null=True, verbose_name="Schwab Meta"),
                ),
            ],
            options={
                "verbose_name": "Symbol Record",
                "verbose_name_plural": "Symbol Records",
            },
        ),
        migrations.CreateModel(
            name="CryptoPriceRec",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "time",
                    timescale.db.models.fields.TimescaleDateTimeField(
                        interval="1 year"
                    ),
                ),
                (
                    "symbol",
                    models.CharField(
                        db_index=True, max_length=20, verbose_name="Symbol"
                    ),
                ),
                (
                    "exchange",
                    models.CharField(
                        db_index=True, max_length=32, verbose_name="Exchange"
                    ),
                ),
                ("open", models.DecimalField(decimal_places=8, max_digits=20)),
                ("high", models.DecimalField(decimal_places=8, max_digits=20)),
                ("low", models.DecimalField(decimal_places=8, max_digits=20)),
                ("close", models.DecimalField(decimal_places=8, max_digits=20)),
                (
                    "volume",
                    models.DecimalField(decimal_places=8, max_digits=20, null=True),
                ),
                (
                    "contract_type",
                    models.CharField(blank=True, max_length=32, null=True),
                ),
            ],
            options={
                "db_table": "crypto_pricerec",
                "ordering": ["time"],
                "get_latest_by": ["time"],
                "indexes": [
                    models.Index(
                        fields=["time", "symbol"], name="crypto_pric_time_82f6d1_idx"
                    ),
                    models.Index(
                        fields=["symbol"], name="crypto_pric_symbol_025314_idx"
                    ),
                ],
            },
            managers=[
                ("timescale", django.db.models.manager.Manager()),
            ],
        ),
        migrations.AddConstraint(
            model_name="cryptopricerec",
            constraint=models.UniqueConstraint(
                fields=("time", "symbol", "exchange"), name="crypto_time_sym_ex_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="cryptotrade",
            index=models.Index(
                fields=["time", "symbol"], name="crypto_trad_time_b3df5b_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="cryptotrade",
            index=models.Index(fields=["symbol"], name="crypto_trad_symbol_1b52cb_idx"),
        ),
        migrations.AddConstraint(
            model_name="cryptotrade",
            constraint=models.UniqueConstraint(
                fields=("time", "symbol", "trade_id"), name="crypto_time_sym_trade_idx"
            ),
        ),
        migrations.AddField(
            model_name="dominogroupmember",
            name="domino_group",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, to="scanner.dominogroup"
            ),
        ),
        migrations.AddField(
            model_name="livelooprun",
            name="loop",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, to="scanner.liveloop"
            ),
        ),
        migrations.AddField(
            model_name="dominogroupmember",
            name="setup",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, to="scanner.setup"
            ),
        ),
        migrations.AddIndex(
            model_name="stockpricerec",
            index=models.Index(
                fields=["time", "symbol"], name="stock_price_time_7aa578_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="stockpricerec",
            index=models.Index(fields=["symbol"], name="stock_price_symbol_aa6ab6_idx"),
        ),
        migrations.AddConstraint(
            model_name="stockpricerec",
            constraint=models.UniqueConstraint(
                fields=("time", "symbol"), name="stock_time_sym_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="stocktrade",
            index=models.Index(
                fields=["time", "symbol"], name="stock_trade_time_ff1af9_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="stocktrade",
            index=models.Index(fields=["symbol"], name="stock_trade_symbol_ff54f8_idx"),
        ),
        migrations.AddConstraint(
            model_name="stocktrade",
            constraint=models.UniqueConstraint(
                fields=("time", "symbol", "trade_id"), name="stock_time_sym_trade_idx"
            ),
        ),
        migrations.AddField(
            model_name="symbolrec",
            name="stock_indexes",
            field=models.ManyToManyField(blank=True, to="scanner.stockindex"),
        ),
        migrations.AddField(
            model_name="setupdev",
            name="symbol_rec",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                to="scanner.symbolrec",
                verbose_name="Symbol Record",
            ),
        ),
        migrations.AddField(
            model_name="setup",
            name="symbol_rec",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                to="scanner.symbolrec",
                verbose_name="Symbol Record",
            ),
        ),
        migrations.AddField(
            model_name="dominogroup",
            name="symbol_rec",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, to="scanner.symbolrec"
            ),
        ),
        migrations.AddConstraint(
            model_name="symbolrec",
            constraint=models.UniqueConstraint(
                fields=("exchange", "symbol"), name="unique_exchange_symbol"
            ),
        ),
        migrations.AddIndex(
            model_name="setupdev",
            index=models.Index(fields=["expires"], name="dev_td__su__ex__abv_puix"),
        ),
        migrations.AddConstraint(
            model_name="setupdev",
            constraint=models.UniqueConstraint(
                fields=("symbol_rec", "timestamp", "tf", "pattern", "direction"),
                name="dev_td__su__sr_pt_dr__abv_puix",
            ),
        ),
        migrations.AddIndex(
            model_name="setup",
            index=models.Index(fields=["expires"], name="td__su__ex__abv_puix"),
        ),
        migrations.AddConstraint(
            model_name="setup",
            constraint=models.UniqueConstraint(
                fields=("symbol_rec", "timestamp", "tf", "pattern", "direction"),
                name="td__su__sr_pt_dr__abv_puix",
            ),
        ),
    ]
