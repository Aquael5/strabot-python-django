# Generated by Django 5.0 on 2024-01-04 01:39

import django.db.models.deletion
import django.utils.timezone
import model_utils.fields
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ("scanner", "0001_initial"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="UserSetupAlert",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "alert_type",
                    models.CharField(
                        choices=[("in_force", "In Force"), ("magnitude", "Magnitude")],
                        max_length=15,
                        verbose_name="Alert Type",
                    ),
                ),
                ("data", models.JSONField(verbose_name="Data")),
                (
                    "realtime_should_send",
                    models.BooleanField(
                        verbose_name="Should Send Realtime Notification?"
                    ),
                ),
                (
                    "realtime_sent",
                    models.BooleanField(
                        blank=True,
                        default=False,
                        help_text="Did we send the realtime notification?\n`False` -> We haven't attempted to send yet either because we haven't gotten to it or because \"Should Send Realtime Notification?\" was `False`.\n`True` -> We successfully sent the realtime notification.\n`None` -> We tried to send the realtime notification but it didn't deliver.\n",
                        null=True,
                        verbose_name="Sent Realtime Notification?",
                    ),
                ),
                (
                    "realtime_sent_at",
                    models.DateTimeField(
                        blank=True,
                        default=None,
                        help_text='The time we last attempted (or successfully delivered if "Sent Realtime Notification?" is `True`) to send a realtime notifciation.',
                        null=True,
                        verbose_name="Sent Realtime Notification At",
                    ),
                ),
                (
                    "realtime_attempt_count",
                    models.PositiveSmallIntegerField(
                        default=0,
                        help_text="The number of times we've attempted to send this realtime notification.",
                        verbose_name="Realtime Attempt Count",
                    ),
                ),
                (
                    "realtime_error",
                    models.TextField(
                        blank=True,
                        default="",
                        help_text="If there was an error trying to send the realtime notification, this will store that error. At the time of writing, it's an idea that it may or may not be stored if we later retry and the push notification is/was successfully delivered.",
                        verbose_name="Realtime Error",
                    ),
                ),
                (
                    "web_push_should_send",
                    models.BooleanField(
                        verbose_name="Should Send Web Push Notification?"
                    ),
                ),
                (
                    "web_push_sent",
                    models.BooleanField(
                        blank=True,
                        default=False,
                        help_text="Did we send the web push notification?\n`False` -> We haven't attempted to send yet either because we haven't gotten to it or because \"Should Send Web Push Notification?\" was `False`.\n`True` -> We successfully sent the web push notification.\n`None` -> We tried to send the web push notification but it didn't deliver.\n",
                        null=True,
                        verbose_name="Sent Web Push Notification?",
                    ),
                ),
                (
                    "web_push_sent_at",
                    models.DateTimeField(
                        blank=True,
                        default=None,
                        help_text='The time we last attempted (or successfully delivered if "Sent Web Push Notification?" is `True`) to send a web push notifciation.',
                        null=True,
                        verbose_name="Sent Web Push Notification At",
                    ),
                ),
                (
                    "web_push_attempt_count",
                    models.PositiveSmallIntegerField(
                        default=0,
                        help_text="The number of times we've attempted to send this web push notification.",
                        verbose_name="Web Push Attempt Count",
                    ),
                ),
                (
                    "web_push_error",
                    models.TextField(
                        blank=True,
                        default="",
                        help_text="If there was an error trying to send the web push notification, this will store that error. At the time of writing, it's an idea that it may or may not be stored if we later retry and the push notification is/was successfully delivered.",
                        verbose_name="Web Push Error",
                    ),
                ),
                (
                    "created",
                    model_utils.fields.AutoCreatedField(
                        default=django.utils.timezone.now,
                        editable=False,
                        verbose_name="Created",
                    ),
                ),
                (
                    "modified",
                    model_utils.fields.AutoLastModifiedField(
                        default=django.utils.timezone.now,
                        editable=False,
                        verbose_name="Modified",
                    ),
                ),
                (
                    "setup",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="scanner.setup",
                        verbose_name="Setup",
                    ),
                ),
                (
                    "symbol_rec",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="scanner.symbolrec",
                        verbose_name="Symbol Record",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        db_index=False,
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="User",
                    ),
                ),
            ],
            options={
                "verbose_name": "User Setup Alert",
                "verbose_name_plural": "User Setup Alerts",
                "indexes": [
                    models.Index(
                        fields=["user", "created"], name="al__usa__us_ct_abv_ix"
                    )
                ],
            },
        ),
        migrations.AddConstraint(
            model_name="usersetupalert",
            constraint=models.UniqueConstraint(
                fields=("user", "symbol_rec", "setup", "alert_type"),
                name="al__usa__us_sr_su_at_abv_uix",
            ),
        ),
    ]
